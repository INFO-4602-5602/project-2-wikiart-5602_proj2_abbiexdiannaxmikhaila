<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20192.19.0818.2120                               -->
<workbook original-version='18.1' source-build='2019.2.3 (20192.19.0818.2120)' source-platform='mac' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <SheetIdentifierTracking ignorable='true' predowngraded='true' />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='WikiArtClean' inline='true' name='federated.09581650lcd0u018ps6x60qerf7v' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='WikiArtClean' name='textscan.1b72n8w0xijftm14y9c091u7clhd'>
            <connection class='textscan' directory='/Users/mikhaila/Dropbox/gradlyfe/school work/infovis/Project2' filename='WikiArtClean.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.1b72n8w0xijftm14y9c091u7clhd' name='WikiArtClean.csv' table='[WikiArtClean#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='Style' ordinal='0' />
            <column datatype='string' name='Category' ordinal='1' />
            <column datatype='string' name='Artist' ordinal='2' />
            <column datatype='string' name='Title' ordinal='3' />
            <column datatype='date' date-parse-format='yyyy' name='Year' ordinal='4' />
            <column datatype='string' name='Image URL' ordinal='5' />
            <column datatype='string' name='Painting Info URL' ordinal='6' />
            <column datatype='string' name='Artist Info URL' ordinal='7' />
            <column datatype='string' name='Is painting' ordinal='8' />
            <column datatype='string' name='Face or body' ordinal='9' />
            <column datatype='real' name='Mean rating' ordinal='10' />
            <column datatype='real' name='Agreeableness' ordinal='11' />
            <column datatype='real' name='Anger' ordinal='12' />
            <column datatype='real' name='Anticipation' ordinal='13' />
            <column datatype='real' name='Arrogance' ordinal='14' />
            <column datatype='real' name='Disagreeableness' ordinal='15' />
            <column datatype='real' name='Disgust' ordinal='16' />
            <column datatype='real' name='Fear' ordinal='17' />
            <column datatype='real' name='Gratitude' ordinal='18' />
            <column datatype='real' name='Happiness' ordinal='19' />
            <column datatype='real' name='Humility' ordinal='20' />
            <column datatype='real' name='Love' ordinal='21' />
            <column datatype='real' name='Optimism' ordinal='22' />
            <column datatype='real' name='Pessimism' ordinal='23' />
            <column datatype='real' name='Regret' ordinal='24' />
            <column datatype='real' name='Sadness' ordinal='25' />
            <column datatype='real' name='Shame' ordinal='26' />
            <column datatype='real' name='Shyness' ordinal='27' />
            <column datatype='real' name='Surprise' ordinal='28' />
            <column datatype='real' name='Trust' ordinal='29' />
            <column datatype='real' name='Neutral' ordinal='30' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Style</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Style]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Style</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Category</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Category]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Category</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Artist</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Artist]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Artist</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Title</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Title]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Title</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>4</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Image URL</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Image URL]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Image URL</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Painting Info URL</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Painting Info URL]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Painting Info URL</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Artist Info URL</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Artist Info URL]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Artist Info URL</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Is painting</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Is painting]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Is painting</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Face or body</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Face or body]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Face or body</remote-alias>
            <ordinal>9</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Mean rating</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Mean rating]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Mean rating</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Agreeableness</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Agreeableness]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Agreeableness</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Anger</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Anger]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Anger</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Anticipation</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Anticipation]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Anticipation</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Arrogance</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Arrogance]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Arrogance</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Disagreeableness</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Disagreeableness]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Disagreeableness</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Disgust</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Disgust]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Disgust</remote-alias>
            <ordinal>16</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Fear</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Fear]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Fear</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Gratitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Gratitude]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Gratitude</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Happiness</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Happiness]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Happiness</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Humility</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Humility]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Humility</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Love</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Love]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Love</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Optimism</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Optimism]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Optimism</remote-alias>
            <ordinal>22</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Pessimism</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Pessimism]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Pessimism</remote-alias>
            <ordinal>23</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Regret</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Regret]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Regret</remote-alias>
            <ordinal>24</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sadness</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Sadness]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Sadness</remote-alias>
            <ordinal>25</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Shame</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Shame]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Shame</remote-alias>
            <ordinal>26</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Shyness</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Shyness]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Shyness</remote-alias>
            <ordinal>27</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Surprise</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Surprise]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Surprise</remote-alias>
            <ordinal>28</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Trust</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Trust]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Trust</remote-alias>
            <ordinal>29</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Neutral</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Neutral]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Neutral</remote-alias>
            <ordinal>30</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Main Category' datatype='string' name='[Category - Split 1]' role='dimension' type='nominal' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.09581650lcd0u018ps6x60qerf7v].[Category]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [Category], &quot;,&quot;, 1 ) )' />
      </column>
      <column caption='Subcategory' datatype='string' name='[Category - Split 2]' role='dimension' type='nominal' user:SplitFieldIndex='2' user:SplitFieldOrigin='[federated.09581650lcd0u018ps6x60qerf7v].[Category]'>
        <calculation class='tableau' formula='IF TRIM( SPLIT( [Category], &quot;,&quot;, 2 ) ) == &apos;&apos; &#10;THEN &apos;None&apos; ELSE TRIM( SPLIT( [Category], &quot;,&quot;, 2 )) END' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='date' name='[Year]' role='dimension' type='quantitative' />
      <column-instance column='[Category - Split 1]' derivation='Attribute' name='[attr:Category - Split 1:nk]' pivot='key' type='nominal' />
      <column-instance column='[Category - Split 1]' derivation='None' name='[none:Category - Split 1:nk]' pivot='key' type='nominal' />
      <column-instance column='[Category - Split 2]' derivation='None' name='[none:Category - Split 2:nk]' pivot='key' type='nominal' />
      <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
      <group hidden='true' name='[Exclusions (Main Category,Year)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:Category - Split 1:nk]' />
          <groupfilter function='level-members' level='[none:Year:qk]' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.410405' measure-ordering='alphabetic' measure-percentage='0.589595' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[attr:Category - Split 1:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Art Informel&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Impressionism&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Neoclassicism&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Expressionism&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Neo-Expressionism&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Color Field Painting&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Cubism&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Rococo&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Abstract Expressionism&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;High Renaissance&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Magic Realism&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Minimalism&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Northern Renaissance&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Baroque&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Romanticism&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Pop Art&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Realism&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Surrealism&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Abstract Art&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Early Renaissance&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Lyrical Abstraction&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Post-Impressionism&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Category - Split 1:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Art Informel&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Impressionism&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Neoclassicism&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Expressionism&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Neo-Expressionism&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Color Field Painting&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Cubism&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Rococo&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Abstract Expressionism&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;High Renaissance&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Magic Realism&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Minimalism&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Northern Renaissance&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Baroque&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Romanticism&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Pop Art&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Realism&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Surrealism&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Abstract Art&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Early Renaissance&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Lyrical Abstraction&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Post-Impressionism&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Category - Split 2:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Neo-Expressionism&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;None&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Expressionism&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Romanticism&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Neoclassicism&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Lyrical Abstraction&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Abstract Expressionism&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Magic Realism&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Surrealism&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Pop Art&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Minimalism&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Color Field Painting&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Post-Impressionism&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cubism&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='WikiArtClean' name='federated.09581650lcd0u018ps6x60qerf7v' />
          </datasources>
          <datasource-dependencies datasource='federated.09581650lcd0u018ps6x60qerf7v'>
            <column caption='Main Category' datatype='string' name='[Category - Split 1]' role='dimension' type='nominal' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.09581650lcd0u018ps6x60qerf7v].[Category]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [Category], &quot;,&quot;, 1 ) )' />
            </column>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='date' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Category - Split 1]' derivation='Count' name='[cnt:Category - Split 1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Category - Split 1]' derivation='None' name='[none:Category - Split 1:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.09581650lcd0u018ps6x60qerf7v].[Exclusions (Main Category,Year)]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[none:Category - Split 1:nk]' />
                <groupfilter function='level-members' level='[none:Year:qk]' />
              </groupfilter>
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Abstract Art&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#1883-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1884-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Abstract Expressionism&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#1854-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1856-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1865-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1875-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Baroque&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#1580-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1582-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1583-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1584-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1587-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1589-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1590-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1592-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1593-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1595-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1596-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1597-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1598-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1599-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1600-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1602-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1603-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1605-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1606-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1607-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1610-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1611-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1613-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1614-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1615-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1616-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1617-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1618-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1619-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1620-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1621-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1622-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1623-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1624-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1625-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1626-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1627-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1628-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1629-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1630-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1631-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1632-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1633-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1634-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1635-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1636-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1637-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1638-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1639-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1640-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Early Renaissance&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#1422-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1425-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1426-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1427-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1430-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1431-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1432-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1435-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1436-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1441-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1443-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1445-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1447-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1449-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1450-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1452-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1456-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1459-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1460-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1464-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1465-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1470-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1473-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1475-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1476-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1478-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1480-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1481-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1483-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1485-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1486-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1487-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1488-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1490-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1492-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1495-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1500-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1506-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Expressionism&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#1888-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1891-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1893-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1894-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1896-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1897-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1898-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;High Renaissance&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#1487-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1490-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1492-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1493-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1495-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1496-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1497-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1498-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1500-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1501-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1502-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1504-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1505-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1506-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1507-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1509-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1510-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1513-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1515-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1517-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1518-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1520-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1522-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1523-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1524-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1527-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1530-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1533-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1534-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1538-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Impressionism&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#1840-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1859-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1862-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1863-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1866-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1867-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1868-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1869-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1870-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1872-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1873-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1874-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1875-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1876-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1877-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1878-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1879-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1880-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1881-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1882-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1883-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1884-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1885-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1886-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1887-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1888-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1889-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1890-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Magic Realism&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#2000-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#2002-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#2003-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#2005-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#2006-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#2007-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#2011-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#2012-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Neo-Expressionism&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#2000-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#2001-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Neoclassicism&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#1750-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1753-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1761-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1762-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1765-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1767-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1772-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1773-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1774-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1776-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1777-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1779-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1780-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1782-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1784-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1785-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1786-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1787-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1788-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1789-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1790-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1791-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1792-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1793-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1794-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1796-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1797-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1798-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1799-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1800-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1801-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1802-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1803-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1804-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1805-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1806-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1807-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1808-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1810-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1811-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1812-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1813-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1814-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1815-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1816-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1817-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1819-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1820-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1821-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1824-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1825-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1826-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1827-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1828-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1829-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1832-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1833-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1835-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1837-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1843-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1845-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1848-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1850-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1852-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1853-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1854-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1862-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1863-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1866-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1875-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1877-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1879-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1882-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1895-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Northern Renaissance&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#1415-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1424-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1430-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1432-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1434-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1435-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1436-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1438-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1440-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1441-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1444-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1445-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1446-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1449-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1450-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1458-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1460-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1462-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1464-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1465-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1466-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1468-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1470-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1475-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1478-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1480-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1481-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1485-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1490-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1491-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1493-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1498-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1500-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1503-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1506-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1507-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1508-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1509-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1510-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1513-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1514-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1515-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1516-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1517-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1519-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1520-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1521-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1523-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1524-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1525-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1527-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1528-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1529-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1530-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1532-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1533-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1534-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1535-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1536-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1539-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1540-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1544-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1550-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1552-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1553-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1559-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1560-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1565-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1567-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1568-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1570-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1572-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1575-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1576-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1577-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1578-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1585-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1588-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1590-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1600-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1605-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1607-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1611-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1625-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Post-Impressionism&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#1883-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1884-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1888-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1889-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1890-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1891-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1892-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1893-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1894-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1895-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1896-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1897-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1898-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1899-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Realism&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#1814-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1819-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1823-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1824-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1826-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1829-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1830-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1831-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1832-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1833-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1834-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1835-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1836-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1837-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1838-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1839-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1840-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1843-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1844-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1845-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1846-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1847-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1848-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1849-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1850-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1851-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1852-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1853-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1854-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1855-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1856-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1857-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1858-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1859-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1860-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1861-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1862-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1863-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1864-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1865-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1866-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1867-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1868-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1869-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1870-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1871-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1872-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1873-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1874-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1875-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Rococo&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#1710-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1716-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1717-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1718-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1727-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1728-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1730-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1731-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1733-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1734-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1735-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1736-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1739-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1740-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1741-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1742-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1743-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1744-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1745-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1746-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1747-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1748-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1749-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1750-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1751-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1752-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1753-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1755-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1756-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1757-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1758-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1760-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1761-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1762-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1763-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1765-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1766-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1767-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1768-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1769-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1770-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1771-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1772-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1773-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1774-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1775-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1776-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1777-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1778-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1779-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1780-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1782-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1783-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1784-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1785-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1786-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1787-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1788-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Romanticism&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#1762-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1765-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1771-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1772-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1773-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1774-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1775-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1777-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1778-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1779-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1781-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1782-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1783-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1784-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1786-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1790-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1791-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1793-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1794-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1796-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1797-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1798-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1799-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1800-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1801-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1802-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1804-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1805-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1806-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1807-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1808-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1809-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1810-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1811-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1812-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1813-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1814-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1815-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1816-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1817-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1818-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1819-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1820-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1821-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1822-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1823-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1824-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1825-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1826-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1827-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1828-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1829-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1830-01-01#' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.09581650lcd0u018ps6x60qerf7v].[Exclusions (Main Category,Year)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' field-type='quantitative' max='#1999-02-28#' min='#1900-11-03#' range-type='fixed' scope='cols' type='space' />
            <format attr='title' class='0' field='[federated.09581650lcd0u018ps6x60qerf7v].[cnt:Category - Split 1:qk]' scope='rows' value='Count of Art' />
            <encoding attr='space' class='0' field='[federated.09581650lcd0u018ps6x60qerf7v].[cnt:Category - Split 1:qk]' field-type='quantitative' max='100' min='0' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='vertical-align' value='top' />
            <format attr='fill-above' id='refline3' value='#00000000' />
            <format attr='fill-below' id='refline3' value='#00000000' />
            <format attr='line-visibility' id='refline3' value='on' />
            <format attr='line-pattern-only' id='refline3' value='dashed' />
            <format attr='stroke-color' id='refline3' value='#555555' />
            <format attr='text-orientation' id='refline0' value='90' />
            <format attr='text-orientation' id='refline1' value='90' />
            <format attr='vertical-align' id='refline1' value='top' />
            <format attr='text-orientation' value='90' />
            <format attr='vertical-align' id='refline3' value='top' />
            <format attr='text-orientation' id='refline3' value='90' />
            <format attr='fill-above' id='refline6' value='#00000000' />
            <format attr='fill-below' id='refline6' value='#00000000' />
            <format attr='line-visibility' id='refline6' value='on' />
            <format attr='line-pattern-only' id='refline6' value='dashed' />
            <format attr='stroke-color' id='refline6' value='#555555' />
            <format attr='line-visibility' value='on' />
            <format attr='line-pattern-only' value='dashed' />
            <format attr='stroke-size' value='1' />
            <format attr='fill-above' id='refline7' value='#00000000' />
            <format attr='fill-below' id='refline7' value='#00000000' />
            <format attr='fill-above' id='refline8' value='#00000000' />
            <format attr='fill-below' id='refline8' value='#00000000' />
            <format attr='fill-above' id='refline9' value='#00000000' />
            <format attr='fill-below' id='refline9' value='#00000000' />
            <format attr='stroke-color' id='refline9' value='#555555' />
            <format attr='stroke-color' value='#5555554b' />
            <format attr='stroke-color' id='refline7' value='#555555' />
            <format attr='stroke-color' id='refline8' value='#555555' />
            <format attr='fill-above' id='refline14' value='#00000000' />
            <format attr='fill-below' id='refline14' value='#00000000' />
            <format attr='stroke-color' id='refline14' value='#555555' />
            <format attr='fill-above' id='refline15' value='#00000000' />
            <format attr='fill-below' id='refline15' value='#00000000' />
            <format attr='stroke-color' id='refline15' value='#555555' />
            <format attr='fill-above' id='refline16' value='#00000000' />
            <format attr='fill-below' id='refline16' value='#00000000' />
            <format attr='stroke-color' id='refline16' value='#555555' />
            <format attr='fill-above' id='refline17' value='#00000000' />
            <format attr='fill-below' id='refline17' value='#00000000' />
            <format attr='stroke-color' id='refline17' value='#555555' />
            <format attr='fill-above' id='refline18' value='#00000000' />
            <format attr='fill-below' id='refline18' value='#00000000' />
            <format attr='fill-above' id='refline19' value='#00000000' />
            <format attr='fill-below' id='refline19' value='#00000000' />
            <format attr='stroke-color' id='refline19' value='#555555' />
            <format attr='stroke-color' id='refline18' value='#555555' />
            <format attr='line-visibility' id='refline18' value='on' />
            <format attr='line-pattern-only' id='refline18' value='dashed' />
          </style-rule>
          <style-rule element='refband'>
            <format attr='line-visibility' id='refline11' value='on' />
            <format attr='line-pattern-only' id='refline11' value='dashed' />
            <format attr='stroke-size' id='refline11' value='1' />
            <format attr='stroke-color' id='refline11' value='#555555' />
            <format attr='line-visibility' id='refline0' value='on' />
            <format attr='line-pattern-only' id='refline0' value='dashed' />
            <format attr='stroke-size' id='refline0' value='1' />
            <format attr='stroke-color' id='refline0' value='#555555' />
            <format attr='fill-color' id='refline10' value='#898989' />
            <format attr='line-visibility' id='refline10' value='on' />
            <format attr='line-pattern-only' id='refline10' value='dashed' />
            <format attr='stroke-color' id='refline10' value='#555555' />
            <format attr='stroke-size' id='refline10' value='1' />
            <format attr='line-visibility' id='refline1' value='on' />
            <format attr='line-pattern-only' id='refline1' value='dashed' />
            <format attr='stroke-color' id='refline1' value='#555555' />
            <format attr='stroke-size' id='refline1' value='1' />
            <format attr='line-visibility' id='refline4' value='on' />
            <format attr='line-pattern-only' id='refline4' value='dashed' />
            <format attr='stroke-size' id='refline4' value='1' />
            <format attr='stroke-color' id='refline4' value='#555555' />
            <format attr='fill-color' id='refline4' value='#d4d4d4' />
            <format attr='line-visibility' id='refline12' value='on' />
            <format attr='line-pattern-only' id='refline12' value='dashed' />
            <format attr='stroke-size' id='refline12' value='1' />
            <format attr='stroke-color' id='refline12' value='#555555' />
            <format attr='line-visibility' id='refline5' value='on' />
            <format attr='line-pattern-only' id='refline5' value='dashed' />
            <format attr='stroke-color' id='refline5' value='#555555' />
            <format attr='stroke-size' id='refline5' value='1' />
            <format attr='line-visibility' id='refline13' value='on' />
            <format attr='line-pattern-only' id='refline13' value='dashed' />
            <format attr='stroke-color' id='refline13' value='#555555' />
            <format attr='stroke-size' id='refline13' value='1' />
            <format attr='fill-color' id='refline11' value='#f9e9e0' />
            <format attr='fill-color' id='refline0' value='#f9e9e0' />
            <format attr='fill-color' id='refline12' value='#f9e9e0' />
            <format attr='fill-color' id='refline1' value='#f5f5f5' />
            <format attr='fill-color' id='refline13' value='#f5f5f5' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <dropline drop-when='selected' haslabel='false' x-axis='true' y-axis='true' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline0' label='WWI' label-type='custom' paired-id='refline3' scope='per-table' symmetric='false' value='#1914-07-28#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='1' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline1' label='' label-type='custom' paired-id='refline10' scope='per-table' symmetric='false' value='#1991-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='6' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline10' label='Cold War Era' label-type='custom' paired-id='refline1' scope='per-table' symmetric='false' value='#1947-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='6' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline11' label='WW2' label-type='custom' paired-id='refline2' scope='per-pane' symmetric='false' value='#1939-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='2' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline12' label-type='none' paired-id='refline4' scope='per-table' symmetric='false' value='#1975-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='7' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline13' label-type='none' paired-id='refline5' scope='per-table' symmetric='false' value='#1939-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='8' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline15' label='Civil Rights Act of 1964' label-type='custom' scope='per-table' value='#1964-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='12' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline16' label='Assisination of MLK Jr.' label-type='custom' scope='per-pane' value='#1968-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='9' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline17' label='Assisination of JFK' label-type='custom' scope='per-table' value='#1963-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='11' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline18' label='Start of Civil Rights Movement' label-type='custom' scope='per-table' value='#1958-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='14' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline19' label='Civil Right Movement begins' label-type='custom' scope='per-pane' value='#1954-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='13' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline2' label-type='none' paired-id='refline11' scope='per-pane' symmetric='false' value='#1945-09-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='2' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline3' label-type='none' paired-id='refline0' scope='per-table' symmetric='false' value='#1918-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='1' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline4' label='Vietnam War' label-type='custom' paired-id='refline12' scope='per-table' symmetric='false' value='#1955-11-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='3' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline5' label='Great Depression' label-type='custom' paired-id='refline13' scope='per-table' symmetric='false' value='#1929-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='8' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline7' label='Mussolini comes into power in Italy' label-type='custom' scope='per-table' value='#1922-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='4' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline8' label='Hilter comes into power in Germany' label-type='custom' scope='per-table' value='#1933-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='5' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline9' label='Apollo 11 lands on the moon' label-type='custom' scope='per-pane' value='#1969-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='10' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#b07aa1' />
                <format attr='mark-markers-mode' value='auto' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.09581650lcd0u018ps6x60qerf7v].[cnt:Category - Split 1:qk]</rows>
        <cols>[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]</cols>
      </table>
      <simple-id uuid='{CC8EBD3C-086B-44E0-98F1-3DF0DD223BBC}' />
    </worksheet>
    <worksheet name='Sheet 1 (2)'>
      <table>
        <view>
          <datasources>
            <datasource caption='WikiArtClean' name='federated.09581650lcd0u018ps6x60qerf7v' />
          </datasources>
          <datasource-dependencies datasource='federated.09581650lcd0u018ps6x60qerf7v'>
            <column caption='Main Category' datatype='string' name='[Category - Split 1]' role='dimension' type='nominal' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.09581650lcd0u018ps6x60qerf7v].[Category]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [Category], &quot;,&quot;, 1 ) )' />
            </column>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='date' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Category - Split 1]' derivation='Count' name='[cnt:Category - Split 1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Category - Split 1]' derivation='None' name='[none:Category - Split 1:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:ok]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Year:ok]' />
              <groupfilter function='union'>
                <groupfilter from='#1415-01-01#' function='range' level='[none:Year:ok]' to='#1899-01-01#' />
                <groupfilter from='#2000-01-01#' function='range' level='[none:Year:ok]' to='#2012-01-01#' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' field-type='quantitative' max='#1999-01-01#' min='#1900-01-01#' range-type='fixed' scope='cols' type='space' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='vertical-align' value='top' />
            <format attr='fill-above' id='refline3' value='#00000000' />
            <format attr='fill-below' id='refline3' value='#00000000' />
            <format attr='line-visibility' id='refline3' value='on' />
            <format attr='line-pattern-only' id='refline3' value='dashed' />
            <format attr='stroke-color' id='refline3' value='#555555' />
            <format attr='text-orientation' id='refline0' value='90' />
            <format attr='text-orientation' id='refline1' value='90' />
            <format attr='vertical-align' id='refline1' value='top' />
            <format attr='text-orientation' value='90' />
            <format attr='vertical-align' id='refline3' value='top' />
            <format attr='text-orientation' id='refline3' value='90' />
            <format attr='fill-above' id='refline6' value='#00000000' />
            <format attr='fill-below' id='refline6' value='#00000000' />
            <format attr='line-visibility' id='refline6' value='on' />
            <format attr='line-pattern-only' id='refline6' value='dashed' />
            <format attr='stroke-color' id='refline6' value='#555555' />
            <format attr='line-visibility' value='on' />
            <format attr='line-pattern-only' value='dashed' />
            <format attr='stroke-size' value='1' />
            <format attr='fill-above' id='refline7' value='#00000000' />
            <format attr='fill-below' id='refline7' value='#00000000' />
            <format attr='fill-above' id='refline8' value='#00000000' />
            <format attr='fill-below' id='refline8' value='#00000000' />
            <format attr='fill-above' id='refline9' value='#00000000' />
            <format attr='fill-below' id='refline9' value='#00000000' />
            <format attr='stroke-color' id='refline9' value='#555555' />
            <format attr='stroke-color' value='#5555554b' />
            <format attr='stroke-color' id='refline7' value='#555555' />
            <format attr='stroke-color' id='refline8' value='#555555' />
            <format attr='fill-above' id='refline14' value='#00000000' />
            <format attr='fill-below' id='refline14' value='#00000000' />
            <format attr='stroke-color' id='refline14' value='#555555' />
            <format attr='fill-above' id='refline15' value='#00000000' />
            <format attr='fill-below' id='refline15' value='#00000000' />
            <format attr='stroke-color' id='refline15' value='#555555' />
            <format attr='fill-above' id='refline16' value='#00000000' />
            <format attr='fill-below' id='refline16' value='#00000000' />
            <format attr='stroke-color' id='refline16' value='#555555' />
            <format attr='fill-above' id='refline17' value='#00000000' />
            <format attr='fill-below' id='refline17' value='#00000000' />
            <format attr='stroke-color' id='refline17' value='#555555' />
            <format attr='fill-above' id='refline18' value='#00000000' />
            <format attr='fill-below' id='refline18' value='#00000000' />
            <format attr='fill-above' id='refline19' value='#00000000' />
            <format attr='fill-below' id='refline19' value='#00000000' />
            <format attr='stroke-color' id='refline19' value='#555555' />
            <format attr='stroke-color' id='refline18' value='#555555' />
            <format attr='line-visibility' id='refline18' value='on' />
            <format attr='line-pattern-only' id='refline18' value='dashed' />
          </style-rule>
          <style-rule element='refband'>
            <format attr='line-visibility' id='refline11' value='on' />
            <format attr='line-pattern-only' id='refline11' value='dashed' />
            <format attr='stroke-size' id='refline11' value='1' />
            <format attr='stroke-color' id='refline11' value='#555555' />
            <format attr='line-visibility' id='refline0' value='on' />
            <format attr='line-pattern-only' id='refline0' value='dashed' />
            <format attr='stroke-size' id='refline0' value='1' />
            <format attr='stroke-color' id='refline0' value='#555555' />
            <format attr='fill-color' id='refline10' value='#898989' />
            <format attr='line-visibility' id='refline10' value='on' />
            <format attr='line-pattern-only' id='refline10' value='dashed' />
            <format attr='stroke-color' id='refline10' value='#555555' />
            <format attr='stroke-size' id='refline10' value='1' />
            <format attr='line-visibility' id='refline1' value='on' />
            <format attr='line-pattern-only' id='refline1' value='dashed' />
            <format attr='stroke-color' id='refline1' value='#555555' />
            <format attr='stroke-size' id='refline1' value='1' />
            <format attr='line-visibility' id='refline4' value='on' />
            <format attr='line-pattern-only' id='refline4' value='dashed' />
            <format attr='stroke-size' id='refline4' value='1' />
            <format attr='stroke-color' id='refline4' value='#555555' />
            <format attr='fill-color' id='refline4' value='#d4d4d4' />
            <format attr='line-visibility' id='refline12' value='on' />
            <format attr='line-pattern-only' id='refline12' value='dashed' />
            <format attr='stroke-size' id='refline12' value='1' />
            <format attr='stroke-color' id='refline12' value='#555555' />
            <format attr='line-visibility' id='refline5' value='on' />
            <format attr='line-pattern-only' id='refline5' value='dashed' />
            <format attr='stroke-color' id='refline5' value='#555555' />
            <format attr='stroke-size' id='refline5' value='1' />
            <format attr='line-visibility' id='refline13' value='on' />
            <format attr='line-pattern-only' id='refline13' value='dashed' />
            <format attr='stroke-color' id='refline13' value='#555555' />
            <format attr='stroke-size' id='refline13' value='1' />
            <format attr='fill-color' id='refline11' value='#f9e9e0' />
            <format attr='fill-color' id='refline0' value='#f9e9e0' />
            <format attr='fill-color' id='refline12' value='#f9e9e0' />
            <format attr='fill-color' id='refline1' value='#f5f5f5' />
            <format attr='fill-color' id='refline13' value='#f5f5f5' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Category - Split 1:nk]' />
            </encodings>
            <dropline drop-when='selected' haslabel='false' x-axis='true' y-axis='false' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline0' label='WWI' label-type='custom' paired-id='refline3' scope='per-table' symmetric='false' value='#1914-07-28#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='1' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline1' label='' label-type='custom' paired-id='refline10' scope='per-table' symmetric='false' value='#1991-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='6' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline10' label='Cold War Era' label-type='custom' paired-id='refline1' scope='per-table' symmetric='false' value='#1947-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='6' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline11' label='WW2' label-type='custom' paired-id='refline2' scope='per-pane' symmetric='false' value='#1939-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='2' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline12' label-type='none' paired-id='refline4' scope='per-table' symmetric='false' value='#1975-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='7' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline13' label-type='none' paired-id='refline5' scope='per-table' symmetric='false' value='#1939-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='8' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline15' label='Civil Rights Act of 1964' label-type='custom' scope='per-table' value='#1964-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='12' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline16' label='Assisination of MLK Jr.' label-type='custom' scope='per-pane' value='#1968-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='9' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline17' label='Assisination of JFK' label-type='custom' scope='per-table' value='#1963-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='11' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline18' label='Start of Civil Rights Movement' label-type='custom' scope='per-table' value='#1958-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='14' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline19' label='Civil Right Movement begins' label-type='custom' scope='per-pane' value='#1954-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='13' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline2' label-type='none' paired-id='refline11' scope='per-pane' symmetric='false' value='#1945-09-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='2' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline3' label-type='none' paired-id='refline0' scope='per-table' symmetric='false' value='#1918-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='1' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline4' label='Vietnam War' label-type='custom' paired-id='refline12' scope='per-table' symmetric='false' value='#1955-11-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='3' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline5' label='Great Depression' label-type='custom' paired-id='refline13' scope='per-table' symmetric='false' value='#1929-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='8' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline7' label='Mussolini comes into power in Italy' label-type='custom' scope='per-table' value='#1922-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='4' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline8' label='Hilter comes into power in Germany' label-type='custom' scope='per-table' value='#1933-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='5' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline9' label='Apollo 11 lands on the moon' label-type='custom' scope='per-pane' value='#1969-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='10' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#b07aa1' />
                <format attr='mark-markers-mode' value='auto' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.09581650lcd0u018ps6x60qerf7v].[cnt:Category - Split 1:qk]</rows>
        <cols>[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]</cols>
      </table>
      <simple-id uuid='{1A823DF7-6F7B-48BA-AE10-AF7526C9DFE5}' />
    </worksheet>
    <worksheet name='Sheet 2'>
      <table>
        <view>
          <datasources>
            <datasource caption='WikiArtClean' name='federated.09581650lcd0u018ps6x60qerf7v' />
          </datasources>
          <datasource-dependencies datasource='federated.09581650lcd0u018ps6x60qerf7v'>
            <column caption='Main Category' datatype='string' name='[Category - Split 1]' role='dimension' type='nominal' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.09581650lcd0u018ps6x60qerf7v].[Category]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [Category], &quot;,&quot;, 1 ) )' />
            </column>
            <column caption='Subcategory' datatype='string' name='[Category - Split 2]' role='dimension' type='nominal' user:SplitFieldIndex='2' user:SplitFieldOrigin='[federated.09581650lcd0u018ps6x60qerf7v].[Category]'>
              <calculation class='tableau' formula='IF TRIM( SPLIT( [Category], &quot;,&quot;, 2 ) ) == &apos;&apos; &#10;THEN &apos;None&apos; ELSE TRIM( SPLIT( [Category], &quot;,&quot;, 2 )) END' />
            </column>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='date' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Category - Split 1]' derivation='None' name='[none:Category - Split 1:nk]' pivot='key' type='nominal' />
            <column-instance column='[Category - Split 2]' derivation='None' name='[none:Category - Split 2:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='Year-Trunc' name='[tyr:Year:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <manual-sort column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Category - Split 1:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Northern Renaissance&quot;</bucket>
              <bucket>&quot;Abstract Art&quot;</bucket>
              <bucket>&quot;Abstract Expressionism&quot;</bucket>
              <bucket>&quot;Art Informel&quot;</bucket>
              <bucket>&quot;Baroque&quot;</bucket>
              <bucket>&quot;Color Field Painting&quot;</bucket>
              <bucket>&quot;Cubism&quot;</bucket>
              <bucket>&quot;Early Renaissance&quot;</bucket>
              <bucket>&quot;Expressionism&quot;</bucket>
              <bucket>&quot;High Renaissance&quot;</bucket>
              <bucket>&quot;Impressionism&quot;</bucket>
              <bucket>&quot;Lyrical Abstraction&quot;</bucket>
              <bucket>&quot;Magic Realism&quot;</bucket>
              <bucket>&quot;Minimalism&quot;</bucket>
              <bucket>&quot;Neo-Expressionism&quot;</bucket>
              <bucket>&quot;Neoclassicism&quot;</bucket>
              <bucket>&quot;Pop Art&quot;</bucket>
              <bucket>&quot;Post-Impressionism&quot;</bucket>
              <bucket>&quot;Realism&quot;</bucket>
              <bucket>&quot;Rococo&quot;</bucket>
              <bucket>&quot;Romanticism&quot;</bucket>
              <bucket>&quot;Surrealism&quot;</bucket>
            </dictionary>
          </manual-sort>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Category - Split 2:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.09581650lcd0u018ps6x60qerf7v].[none:Category - Split 1:nk]</rows>
        <cols>[federated.09581650lcd0u018ps6x60qerf7v].[tyr:Year:qk]</cols>
      </table>
      <simple-id uuid='{FECB23B6-70BB-4708-91D6-F020861E8544}' />
    </worksheet>
  </worksheets>
  <windows source-height='30'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='100'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <axis>[federated.09581650lcd0u018ps6x60qerf7v].[cnt:Category - Split 1:qk]</axis>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.09581650lcd0u018ps6x60qerf7v].[none:Category - Split 1:nk]</field>
            <field>[federated.09581650lcd0u018ps6x60qerf7v].[none:Category - Split 2:nk]</field>
            <field>[federated.09581650lcd0u018ps6x60qerf7v].[none:Category:nk]</field>
            <field>[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{D0CF24A5-07FF-4185-A3E8-09A04AC1615B}' />
    </window>
    <window class='worksheet' name='Sheet 1 (2)'>
      <cards>
        <edge name='left'>
          <strip size='100'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.09581650lcd0u018ps6x60qerf7v].[none:Category - Split 1:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.09581650lcd0u018ps6x60qerf7v].[none:Category - Split 2:nk]</field>
            <field>[federated.09581650lcd0u018ps6x60qerf7v].[none:Category:nk]</field>
            <field>[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{EBED77B7-75B1-40DA-B4B5-3AD0DFF50C13}' />
    </window>
    <window class='worksheet' maximized='true' name='Sheet 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.09581650lcd0u018ps6x60qerf7v].[none:Category - Split 2:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.09581650lcd0u018ps6x60qerf7v].[none:Category - Split 1:nk]</field>
            <field>[federated.09581650lcd0u018ps6x60qerf7v].[none:Category - Split 2:nk]</field>
            <field>[federated.09581650lcd0u018ps6x60qerf7v].[tyr:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{BFC7AD86-11C0-4A69-A7D9-AB9B521E21DF}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Sheet 1' width='192'>
      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
      RK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 1 (2)' width='192'>
      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
      La6cIIHHAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Sheet 2' width='192'>
      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
      +/8BhTebeEzCkngAAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>

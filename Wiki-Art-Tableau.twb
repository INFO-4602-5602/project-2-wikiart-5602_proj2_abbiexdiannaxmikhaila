<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20192.19.0818.2120                               -->
<workbook original-version='18.1' source-build='2019.2.3 (20192.19.0818.2120)' source-platform='mac' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <SheetIdentifierTracking ignorable='true' predowngraded='true' />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='WikiArtClean' inline='true' name='federated.09581650lcd0u018ps6x60qerf7v' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='WikiArtClean' name='textscan.1b72n8w0xijftm14y9c091u7clhd'>
            <connection class='textscan' directory='/Users/mikhaila/Dropbox/gradlyfe/school work/infovis/Project2' filename='WikiArtClean.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.1b72n8w0xijftm14y9c091u7clhd' name='WikiArtClean.csv' table='[WikiArtClean#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='Style' ordinal='0' />
            <column datatype='string' name='Category' ordinal='1' />
            <column datatype='string' name='Artist' ordinal='2' />
            <column datatype='string' name='Title' ordinal='3' />
            <column datatype='date' date-parse-format='yyyy' name='Year' ordinal='4' />
            <column datatype='string' name='Image URL' ordinal='5' />
            <column datatype='string' name='Painting Info URL' ordinal='6' />
            <column datatype='string' name='Artist Info URL' ordinal='7' />
            <column datatype='string' name='Is painting' ordinal='8' />
            <column datatype='string' name='Face or body' ordinal='9' />
            <column datatype='real' name='Mean rating' ordinal='10' />
            <column datatype='real' name='Agreeableness' ordinal='11' />
            <column datatype='real' name='Anger' ordinal='12' />
            <column datatype='real' name='Anticipation' ordinal='13' />
            <column datatype='real' name='Arrogance' ordinal='14' />
            <column datatype='real' name='Disagreeableness' ordinal='15' />
            <column datatype='real' name='Disgust' ordinal='16' />
            <column datatype='real' name='Fear' ordinal='17' />
            <column datatype='real' name='Gratitude' ordinal='18' />
            <column datatype='real' name='Happiness' ordinal='19' />
            <column datatype='real' name='Humility' ordinal='20' />
            <column datatype='real' name='Love' ordinal='21' />
            <column datatype='real' name='Optimism' ordinal='22' />
            <column datatype='real' name='Pessimism' ordinal='23' />
            <column datatype='real' name='Regret' ordinal='24' />
            <column datatype='real' name='Sadness' ordinal='25' />
            <column datatype='real' name='Shame' ordinal='26' />
            <column datatype='real' name='Shyness' ordinal='27' />
            <column datatype='real' name='Surprise' ordinal='28' />
            <column datatype='real' name='Trust' ordinal='29' />
            <column datatype='real' name='Neutral' ordinal='30' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Style</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Style]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Style</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Category</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Category]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Category</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Artist</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Artist]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Artist</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Title</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Title]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Title</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>4</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Image URL</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Image URL]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Image URL</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Painting Info URL</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Painting Info URL]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Painting Info URL</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Artist Info URL</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Artist Info URL]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Artist Info URL</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Is painting</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Is painting]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Is painting</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Face or body</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Face or body]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Face or body</remote-alias>
            <ordinal>9</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Mean rating</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Mean rating]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Mean rating</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Agreeableness</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Agreeableness]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Agreeableness</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Anger</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Anger]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Anger</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Anticipation</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Anticipation]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Anticipation</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Arrogance</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Arrogance]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Arrogance</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Disagreeableness</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Disagreeableness]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Disagreeableness</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Disgust</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Disgust]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Disgust</remote-alias>
            <ordinal>16</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Fear</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Fear]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Fear</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Gratitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Gratitude]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Gratitude</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Happiness</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Happiness]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Happiness</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Humility</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Humility]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Humility</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Love</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Love]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Love</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Optimism</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Optimism]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Optimism</remote-alias>
            <ordinal>22</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Pessimism</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Pessimism]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Pessimism</remote-alias>
            <ordinal>23</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Regret</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Regret]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Regret</remote-alias>
            <ordinal>24</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sadness</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Sadness]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Sadness</remote-alias>
            <ordinal>25</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Shame</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Shame]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Shame</remote-alias>
            <ordinal>26</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Shyness</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Shyness]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Shyness</remote-alias>
            <ordinal>27</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Surprise</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Surprise]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Surprise</remote-alias>
            <ordinal>28</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Trust</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Trust]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Trust</remote-alias>
            <ordinal>29</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Neutral</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Neutral]</local-name>
            <parent-name>[WikiArtClean.csv]</parent-name>
            <remote-alias>Neutral</remote-alias>
            <ordinal>30</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Main Category' datatype='string' name='[Category - Split 1]' role='dimension' type='nominal' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.09581650lcd0u018ps6x60qerf7v].[Category]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [Category], &quot;,&quot;, 1 ) )' />
      </column>
      <column caption='Subcategory' datatype='string' name='[Category - Split 2]' role='dimension' type='nominal' user:SplitFieldIndex='2' user:SplitFieldOrigin='[federated.09581650lcd0u018ps6x60qerf7v].[Category]'>
        <calculation class='tableau' formula='IF TRIM( SPLIT( [Category], &quot;,&quot;, 2 ) ) == &apos;&apos; &#10;THEN &apos;None&apos; ELSE TRIM( SPLIT( [Category], &quot;,&quot;, 2 )) END' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='date' name='[Year]' role='dimension' type='quantitative' />
      <column-instance column='[Category - Split 1]' derivation='Attribute' name='[attr:Category - Split 1:nk]' pivot='key' type='nominal' />
      <column-instance column='[Category - Split 1]' derivation='None' name='[none:Category - Split 1:nk]' pivot='key' type='nominal' />
      <column-instance column='[Category - Split 2]' derivation='None' name='[none:Category - Split 2:nk]' pivot='key' type='nominal' />
      <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
      <group hidden='true' name='[Exclusions (Main Category,Year)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:Category - Split 1:nk]' />
          <groupfilter function='level-members' level='[none:Year:qk]' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.411348' measure-ordering='alphabetic' measure-percentage='0.588652' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[attr:Category - Split 1:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Art Informel&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Impressionism&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Neoclassicism&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Expressionism&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Neo-Expressionism&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Color Field Painting&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Cubism&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Rococo&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Abstract Expressionism&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;High Renaissance&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Magic Realism&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Minimalism&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Northern Renaissance&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Baroque&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Romanticism&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Pop Art&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Realism&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Surrealism&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Abstract Art&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Early Renaissance&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Lyrical Abstraction&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Post-Impressionism&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Category - Split 2:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Neo-Expressionism&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;None&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Expressionism&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Romanticism&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Neoclassicism&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Lyrical Abstraction&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Abstract Expressionism&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Magic Realism&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Surrealism&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Pop Art&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Minimalism&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Color Field Painting&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Post-Impressionism&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cubism&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Category - Split 1:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Art Informel&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Impressionism&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Neoclassicism&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Expressionism&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Neo-Expressionism&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Color Field Painting&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Cubism&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Rococo&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Abstract Expressionism&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;High Renaissance&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Magic Realism&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Minimalism&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Northern Renaissance&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Baroque&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Romanticism&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Pop Art&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Realism&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Surrealism&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Abstract Art&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Early Renaissance&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Lyrical Abstraction&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Post-Impressionism&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='WikiArtClean' name='federated.09581650lcd0u018ps6x60qerf7v' />
          </datasources>
          <datasource-dependencies datasource='federated.09581650lcd0u018ps6x60qerf7v'>
            <column caption='Main Category' datatype='string' name='[Category - Split 1]' role='dimension' type='nominal' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.09581650lcd0u018ps6x60qerf7v].[Category]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [Category], &quot;,&quot;, 1 ) )' />
            </column>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='date' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Category - Split 1]' derivation='Count' name='[cnt:Category - Split 1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Category - Split 1]' derivation='None' name='[none:Category - Split 1:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.09581650lcd0u018ps6x60qerf7v].[Exclusions (Main Category,Year)]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[none:Category - Split 1:nk]' />
                <groupfilter function='level-members' level='[none:Year:qk]' />
              </groupfilter>
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Abstract Art&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#1883-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1884-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Abstract Expressionism&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#1854-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1856-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1865-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1875-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Baroque&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#1580-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1582-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1583-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1584-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1587-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1589-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1590-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1592-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1593-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1595-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1596-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1597-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1598-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1599-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1600-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1602-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1603-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1605-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1606-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1607-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1610-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1611-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1613-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1614-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1615-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1616-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1617-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1618-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1619-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1620-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1621-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1622-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1623-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1624-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1625-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1626-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1627-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1628-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1629-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1630-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1631-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1632-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1633-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1634-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1635-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1636-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1637-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1638-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1639-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1640-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Early Renaissance&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#1422-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1425-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1426-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1427-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1430-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1431-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1432-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1435-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1436-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1441-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1443-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1445-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1447-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1449-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1450-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1452-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1456-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1459-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1460-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1464-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1465-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1470-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1473-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1475-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1476-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1478-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1480-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1481-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1483-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1485-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1486-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1487-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1488-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1490-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1492-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1495-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1500-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1506-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Expressionism&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#1888-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1891-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1893-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1894-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1896-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1897-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1898-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;High Renaissance&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#1487-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1490-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1492-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1493-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1495-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1496-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1497-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1498-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1500-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1501-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1502-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1504-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1505-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1506-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1507-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1509-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1510-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1513-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1515-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1517-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1518-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1520-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1522-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1523-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1524-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1527-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1530-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1533-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1534-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1538-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Impressionism&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#1840-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1859-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1862-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1863-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1866-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1867-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1868-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1869-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1870-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1872-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1873-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1874-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1875-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1876-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1877-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1878-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1879-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1880-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1881-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1882-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1883-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1884-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1885-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1886-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1887-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1888-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1889-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1890-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Magic Realism&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#2000-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#2002-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#2003-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#2005-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#2006-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#2007-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#2011-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#2012-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Neo-Expressionism&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#2000-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#2001-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Neoclassicism&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#1750-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1753-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1761-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1762-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1765-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1767-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1772-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1773-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1774-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1776-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1777-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1779-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1780-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1782-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1784-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1785-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1786-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1787-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1788-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1789-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1790-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1791-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1792-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1793-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1794-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1796-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1797-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1798-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1799-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1800-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1801-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1802-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1803-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1804-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1805-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1806-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1807-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1808-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1810-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1811-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1812-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1813-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1814-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1815-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1816-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1817-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1819-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1820-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1821-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1824-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1825-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1826-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1827-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1828-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1829-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1832-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1833-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1835-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1837-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1843-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1845-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1848-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1850-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1852-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1853-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1854-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1862-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1863-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1866-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1875-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1877-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1879-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1882-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1895-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Northern Renaissance&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#1415-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1424-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1430-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1432-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1434-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1435-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1436-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1438-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1440-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1441-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1444-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1445-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1446-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1449-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1450-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1458-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1460-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1462-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1464-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1465-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1466-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1468-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1470-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1475-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1478-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1480-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1481-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1485-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1490-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1491-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1493-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1498-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1500-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1503-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1506-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1507-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1508-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1509-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1510-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1513-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1514-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1515-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1516-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1517-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1519-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1520-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1521-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1523-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1524-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1525-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1527-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1528-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1529-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1530-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1532-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1533-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1534-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1535-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1536-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1539-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1540-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1544-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1550-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1552-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1553-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1559-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1560-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1565-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1567-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1568-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1570-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1572-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1575-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1576-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1577-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1578-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1585-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1588-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1590-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1600-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1605-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1607-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1611-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1625-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Post-Impressionism&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#1883-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1884-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1888-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1889-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1890-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1891-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1892-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1893-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1894-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1895-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1896-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1897-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1898-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1899-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Realism&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#1814-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1819-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1823-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1824-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1826-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1829-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1830-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1831-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1832-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1833-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1834-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1835-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1836-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1837-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1838-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1839-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1840-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1843-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1844-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1845-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1846-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1847-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1848-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1849-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1850-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1851-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1852-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1853-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1854-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1855-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1856-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1857-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1858-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1859-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1860-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1861-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1862-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1863-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1864-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1865-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1866-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1867-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1868-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1869-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1870-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1871-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1872-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1873-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1874-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1875-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Rococo&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#1710-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1716-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1717-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1718-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1727-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1728-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1730-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1731-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1733-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1734-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1735-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1736-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1739-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1740-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1741-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1742-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1743-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1744-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1745-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1746-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1747-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1748-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1749-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1750-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1751-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1752-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1753-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1755-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1756-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1757-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1758-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1760-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1761-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1762-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1763-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1765-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1766-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1767-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1768-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1769-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1770-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1771-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1772-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1773-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1774-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1775-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1776-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1777-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1778-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1779-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1780-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1782-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1783-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1784-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1785-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1786-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1787-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1788-01-01#' />
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Category - Split 1:nk]' member='&quot;Romanticism&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Year:qk]' member='#1762-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1765-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1771-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1772-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1773-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1774-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1775-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1777-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1778-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1779-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1781-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1782-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1783-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1784-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1786-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1790-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1791-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1793-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1794-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1796-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1797-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1798-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1799-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1800-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1801-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1802-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1804-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1805-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1806-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1807-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1808-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1809-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1810-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1811-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1812-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1813-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1814-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1815-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1816-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1817-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1818-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1819-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1820-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1821-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1822-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1823-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1824-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1825-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1826-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1827-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1828-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1829-01-01#' />
                    <groupfilter function='member' level='[none:Year:qk]' member='#1830-01-01#' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.09581650lcd0u018ps6x60qerf7v].[Exclusions (Main Category,Year)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' field-type='quantitative' max='#1999-02-28#' min='#1900-11-03#' range-type='fixed' scope='cols' type='space' />
            <format attr='title' class='0' field='[federated.09581650lcd0u018ps6x60qerf7v].[cnt:Category - Split 1:qk]' scope='rows' value='Count of Art' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='vertical-align' value='top' />
            <format attr='fill-above' id='refline3' value='#00000000' />
            <format attr='fill-below' id='refline3' value='#00000000' />
            <format attr='line-visibility' id='refline3' value='on' />
            <format attr='line-pattern-only' id='refline3' value='dashed' />
            <format attr='stroke-color' id='refline3' value='#555555' />
            <format attr='text-orientation' id='refline0' value='90' />
            <format attr='text-orientation' id='refline1' value='90' />
            <format attr='vertical-align' id='refline1' value='top' />
            <format attr='text-orientation' value='90' />
            <format attr='vertical-align' id='refline3' value='top' />
            <format attr='text-orientation' id='refline3' value='90' />
            <format attr='fill-above' id='refline6' value='#00000000' />
            <format attr='fill-below' id='refline6' value='#00000000' />
            <format attr='line-visibility' id='refline6' value='on' />
            <format attr='line-pattern-only' id='refline6' value='dashed' />
            <format attr='stroke-color' id='refline6' value='#555555' />
            <format attr='line-visibility' value='on' />
            <format attr='line-pattern-only' value='dashed' />
            <format attr='stroke-size' value='1' />
            <format attr='fill-above' id='refline7' value='#00000000' />
            <format attr='fill-below' id='refline7' value='#00000000' />
            <format attr='fill-above' id='refline8' value='#00000000' />
            <format attr='fill-below' id='refline8' value='#00000000' />
            <format attr='fill-above' id='refline9' value='#00000000' />
            <format attr='fill-below' id='refline9' value='#00000000' />
            <format attr='stroke-color' id='refline9' value='#555555' />
            <format attr='stroke-color' value='#5555554b' />
            <format attr='stroke-color' id='refline7' value='#555555' />
            <format attr='stroke-color' id='refline8' value='#555555' />
            <format attr='fill-above' id='refline14' value='#00000000' />
            <format attr='fill-below' id='refline14' value='#00000000' />
            <format attr='stroke-color' id='refline14' value='#555555' />
            <format attr='fill-above' id='refline15' value='#00000000' />
            <format attr='fill-below' id='refline15' value='#00000000' />
            <format attr='stroke-color' id='refline15' value='#555555' />
            <format attr='fill-above' id='refline16' value='#00000000' />
            <format attr='fill-below' id='refline16' value='#00000000' />
            <format attr='stroke-color' id='refline16' value='#555555' />
            <format attr='fill-above' id='refline17' value='#00000000' />
            <format attr='fill-below' id='refline17' value='#00000000' />
            <format attr='stroke-color' id='refline17' value='#555555' />
            <format attr='fill-above' id='refline18' value='#00000000' />
            <format attr='fill-below' id='refline18' value='#00000000' />
            <format attr='fill-above' id='refline19' value='#00000000' />
            <format attr='fill-below' id='refline19' value='#00000000' />
            <format attr='stroke-color' id='refline19' value='#555555' />
            <format attr='stroke-color' id='refline18' value='#555555' />
            <format attr='line-visibility' id='refline18' value='on' />
            <format attr='line-pattern-only' id='refline18' value='dashed' />
          </style-rule>
          <style-rule element='refband'>
            <format attr='line-visibility' id='refline11' value='on' />
            <format attr='line-pattern-only' id='refline11' value='dashed' />
            <format attr='stroke-size' id='refline11' value='1' />
            <format attr='stroke-color' id='refline11' value='#555555' />
            <format attr='line-visibility' id='refline0' value='on' />
            <format attr='line-pattern-only' id='refline0' value='dashed' />
            <format attr='stroke-size' id='refline0' value='1' />
            <format attr='stroke-color' id='refline0' value='#555555' />
            <format attr='fill-color' id='refline10' value='#898989' />
            <format attr='line-visibility' id='refline10' value='on' />
            <format attr='line-pattern-only' id='refline10' value='dashed' />
            <format attr='stroke-color' id='refline10' value='#555555' />
            <format attr='stroke-size' id='refline10' value='1' />
            <format attr='line-visibility' id='refline1' value='on' />
            <format attr='line-pattern-only' id='refline1' value='dashed' />
            <format attr='stroke-color' id='refline1' value='#555555' />
            <format attr='stroke-size' id='refline1' value='1' />
            <format attr='line-visibility' id='refline4' value='on' />
            <format attr='line-pattern-only' id='refline4' value='dashed' />
            <format attr='stroke-size' id='refline4' value='1' />
            <format attr='stroke-color' id='refline4' value='#555555' />
            <format attr='fill-color' id='refline4' value='#d4d4d4' />
            <format attr='line-visibility' id='refline12' value='on' />
            <format attr='line-pattern-only' id='refline12' value='dashed' />
            <format attr='stroke-size' id='refline12' value='1' />
            <format attr='stroke-color' id='refline12' value='#555555' />
            <format attr='line-visibility' id='refline5' value='on' />
            <format attr='line-pattern-only' id='refline5' value='dashed' />
            <format attr='stroke-color' id='refline5' value='#555555' />
            <format attr='stroke-size' id='refline5' value='1' />
            <format attr='line-visibility' id='refline13' value='on' />
            <format attr='line-pattern-only' id='refline13' value='dashed' />
            <format attr='stroke-color' id='refline13' value='#555555' />
            <format attr='stroke-size' id='refline13' value='1' />
            <format attr='fill-color' id='refline11' value='#f9e9e0' />
            <format attr='fill-color' id='refline0' value='#f9e9e0' />
            <format attr='fill-color' id='refline12' value='#f9e9e0' />
            <format attr='fill-color' id='refline1' value='#f5f5f5' />
            <format attr='fill-color' id='refline13' value='#f5f5f5' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <dropline drop-when='selected' haslabel='false' x-axis='true' y-axis='true' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline0' label='WWI' label-type='custom' paired-id='refline3' scope='per-table' symmetric='false' value='#1914-07-28#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='1' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline1' label='' label-type='custom' paired-id='refline10' scope='per-table' symmetric='false' value='#1991-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='6' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline10' label='Cold War Era' label-type='custom' paired-id='refline1' scope='per-table' symmetric='false' value='#1947-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='6' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline11' label='WW2' label-type='custom' paired-id='refline2' scope='per-pane' symmetric='false' value='#1939-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='2' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline12' label-type='none' paired-id='refline4' scope='per-table' symmetric='false' value='#1975-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='7' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline13' label-type='none' paired-id='refline5' scope='per-table' symmetric='false' value='#1939-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='8' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline15' label='Civil Rights Act of 1964' label-type='custom' scope='per-table' value='#1964-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='12' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline16' label='Assisination of MLK Jr.' label-type='custom' scope='per-pane' value='#1968-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='9' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline17' label='Assisination of JFK' label-type='custom' scope='per-table' value='#1963-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='11' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline18' label='Start of Civil Rights Movement' label-type='custom' scope='per-table' value='#1958-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='14' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline19' label='Civil Right Movement begins' label-type='custom' scope='per-pane' value='#1954-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='13' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline2' label-type='none' paired-id='refline11' scope='per-pane' symmetric='false' value='#1945-09-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='2' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline3' label-type='none' paired-id='refline0' scope='per-table' symmetric='false' value='#1918-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='1' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline4' label='Vietnam War' label-type='custom' paired-id='refline12' scope='per-table' symmetric='false' value='#1955-11-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='3' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline5' label='Great Depression' label-type='custom' paired-id='refline13' scope='per-table' symmetric='false' value='#1929-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='8' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline7' label='Mussolini comes into power in Italy' label-type='custom' scope='per-table' value='#1922-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='4' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline8' label='Hilter comes into power in Germany' label-type='custom' scope='per-table' value='#1933-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='5' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline9' label='Apollo 11 lands on the moon' label-type='custom' scope='per-pane' value='#1969-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='10' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#b07aa1' />
                <format attr='mark-markers-mode' value='auto' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.09581650lcd0u018ps6x60qerf7v].[cnt:Category - Split 1:qk]</rows>
        <cols>[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]</cols>
      </table>
      <simple-id uuid='{CC8EBD3C-086B-44E0-98F1-3DF0DD223BBC}' />
    </worksheet>
    <worksheet name='Sheet 1 (2)'>
      <table>
        <view>
          <datasources>
            <datasource caption='WikiArtClean' name='federated.09581650lcd0u018ps6x60qerf7v' />
          </datasources>
          <datasource-dependencies datasource='federated.09581650lcd0u018ps6x60qerf7v'>
            <column caption='Main Category' datatype='string' name='[Category - Split 1]' role='dimension' type='nominal' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.09581650lcd0u018ps6x60qerf7v].[Category]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [Category], &quot;,&quot;, 1 ) )' />
            </column>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='date' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Category - Split 1]' derivation='Count' name='[cnt:Category - Split 1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Category - Split 1]' derivation='None' name='[none:Category - Split 1:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:ok]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:Year:ok]' />
              <groupfilter function='union'>
                <groupfilter from='#1415-01-01#' function='range' level='[none:Year:ok]' to='#1899-01-01#' />
                <groupfilter from='#2000-01-01#' function='range' level='[none:Year:ok]' to='#2012-01-01#' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' field-type='quantitative' max='#1999-01-01 00:00:00#' min='#1900-01-01 00:00:00#' range-type='fixed' scope='cols' type='space' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='vertical-align' value='top' />
            <format attr='fill-above' id='refline3' value='#00000000' />
            <format attr='fill-below' id='refline3' value='#00000000' />
            <format attr='line-visibility' id='refline3' value='on' />
            <format attr='line-pattern-only' id='refline3' value='dashed' />
            <format attr='stroke-color' id='refline3' value='#555555' />
            <format attr='text-orientation' id='refline0' value='90' />
            <format attr='text-orientation' id='refline1' value='90' />
            <format attr='vertical-align' id='refline1' value='top' />
            <format attr='text-orientation' value='90' />
            <format attr='vertical-align' id='refline3' value='top' />
            <format attr='text-orientation' id='refline3' value='90' />
            <format attr='fill-above' id='refline6' value='#00000000' />
            <format attr='fill-below' id='refline6' value='#00000000' />
            <format attr='line-visibility' id='refline6' value='on' />
            <format attr='line-pattern-only' id='refline6' value='dashed' />
            <format attr='stroke-color' id='refline6' value='#555555' />
            <format attr='line-visibility' value='on' />
            <format attr='line-pattern-only' value='dashed' />
            <format attr='stroke-size' value='1' />
            <format attr='fill-above' id='refline7' value='#00000000' />
            <format attr='fill-below' id='refline7' value='#00000000' />
            <format attr='fill-above' id='refline8' value='#00000000' />
            <format attr='fill-below' id='refline8' value='#00000000' />
            <format attr='fill-above' id='refline9' value='#00000000' />
            <format attr='fill-below' id='refline9' value='#00000000' />
            <format attr='stroke-color' id='refline9' value='#555555' />
            <format attr='stroke-color' value='#5555554b' />
            <format attr='stroke-color' id='refline7' value='#555555' />
            <format attr='stroke-color' id='refline8' value='#555555' />
            <format attr='fill-above' id='refline14' value='#00000000' />
            <format attr='fill-below' id='refline14' value='#00000000' />
            <format attr='stroke-color' id='refline14' value='#555555' />
            <format attr='fill-above' id='refline15' value='#00000000' />
            <format attr='fill-below' id='refline15' value='#00000000' />
            <format attr='stroke-color' id='refline15' value='#555555' />
            <format attr='fill-above' id='refline16' value='#00000000' />
            <format attr='fill-below' id='refline16' value='#00000000' />
            <format attr='stroke-color' id='refline16' value='#555555' />
            <format attr='fill-above' id='refline17' value='#00000000' />
            <format attr='fill-below' id='refline17' value='#00000000' />
            <format attr='stroke-color' id='refline17' value='#555555' />
            <format attr='fill-above' id='refline18' value='#00000000' />
            <format attr='fill-below' id='refline18' value='#00000000' />
            <format attr='fill-above' id='refline19' value='#00000000' />
            <format attr='fill-below' id='refline19' value='#00000000' />
            <format attr='stroke-color' id='refline19' value='#555555' />
            <format attr='stroke-color' id='refline18' value='#555555' />
            <format attr='line-visibility' id='refline18' value='on' />
            <format attr='line-pattern-only' id='refline18' value='dashed' />
          </style-rule>
          <style-rule element='refband'>
            <format attr='line-visibility' id='refline11' value='on' />
            <format attr='line-pattern-only' id='refline11' value='dashed' />
            <format attr='stroke-size' id='refline11' value='1' />
            <format attr='stroke-color' id='refline11' value='#555555' />
            <format attr='line-visibility' id='refline0' value='on' />
            <format attr='line-pattern-only' id='refline0' value='dashed' />
            <format attr='stroke-size' id='refline0' value='1' />
            <format attr='stroke-color' id='refline0' value='#555555' />
            <format attr='fill-color' id='refline10' value='#898989' />
            <format attr='line-visibility' id='refline10' value='on' />
            <format attr='line-pattern-only' id='refline10' value='dashed' />
            <format attr='stroke-color' id='refline10' value='#555555' />
            <format attr='stroke-size' id='refline10' value='1' />
            <format attr='line-visibility' id='refline1' value='on' />
            <format attr='line-pattern-only' id='refline1' value='dashed' />
            <format attr='stroke-color' id='refline1' value='#555555' />
            <format attr='stroke-size' id='refline1' value='1' />
            <format attr='line-visibility' id='refline4' value='on' />
            <format attr='line-pattern-only' id='refline4' value='dashed' />
            <format attr='stroke-size' id='refline4' value='1' />
            <format attr='stroke-color' id='refline4' value='#555555' />
            <format attr='fill-color' id='refline4' value='#d4d4d4' />
            <format attr='line-visibility' id='refline12' value='on' />
            <format attr='line-pattern-only' id='refline12' value='dashed' />
            <format attr='stroke-size' id='refline12' value='1' />
            <format attr='stroke-color' id='refline12' value='#555555' />
            <format attr='line-visibility' id='refline5' value='on' />
            <format attr='line-pattern-only' id='refline5' value='dashed' />
            <format attr='stroke-color' id='refline5' value='#555555' />
            <format attr='stroke-size' id='refline5' value='1' />
            <format attr='line-visibility' id='refline13' value='on' />
            <format attr='line-pattern-only' id='refline13' value='dashed' />
            <format attr='stroke-color' id='refline13' value='#555555' />
            <format attr='stroke-size' id='refline13' value='1' />
            <format attr='fill-color' id='refline11' value='#f9e9e0' />
            <format attr='fill-color' id='refline0' value='#f9e9e0' />
            <format attr='fill-color' id='refline12' value='#f9e9e0' />
            <format attr='fill-color' id='refline1' value='#f5f5f5' />
            <format attr='fill-color' id='refline13' value='#f5f5f5' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Category - Split 1:nk]' />
            </encodings>
            <dropline drop-when='selected' haslabel='false' x-axis='true' y-axis='false' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline0' label='WWI' label-type='custom' paired-id='refline3' scope='per-table' symmetric='false' value='#1914-07-28#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='1' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline1' label='' label-type='custom' paired-id='refline10' scope='per-table' symmetric='false' value='#1991-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='6' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline10' label='Cold War Era' label-type='custom' paired-id='refline1' scope='per-table' symmetric='false' value='#1947-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='6' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline11' label='WW2' label-type='custom' paired-id='refline2' scope='per-pane' symmetric='false' value='#1939-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='2' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline12' label-type='none' paired-id='refline4' scope='per-table' symmetric='false' value='#1975-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='7' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline13' label-type='none' paired-id='refline5' scope='per-table' symmetric='false' value='#1939-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='8' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline15' label='Civil Rights Act of 1964' label-type='custom' scope='per-table' value='#1964-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='12' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline16' label='Assisination of MLK Jr.' label-type='custom' scope='per-pane' value='#1968-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='9' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline17' label='Assisination of JFK' label-type='custom' scope='per-table' value='#1963-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='11' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline18' label='Start of Civil Rights Movement' label-type='custom' scope='per-table' value='#1958-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='14' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline19' label='Civil Right Movement begins' label-type='custom' scope='per-pane' value='#1954-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='13' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline2' label-type='none' paired-id='refline11' scope='per-pane' symmetric='false' value='#1945-09-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='2' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline3' label-type='none' paired-id='refline0' scope='per-table' symmetric='false' value='#1918-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='1' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline4' label='Vietnam War' label-type='custom' paired-id='refline12' scope='per-table' symmetric='false' value='#1955-11-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='3' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline5' label='Great Depression' label-type='custom' paired-id='refline13' scope='per-table' symmetric='false' value='#1929-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='8' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline7' label='Mussolini comes into power in Italy' label-type='custom' scope='per-table' value='#1922-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='4' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline8' label='Hilter comes into power in Germany' label-type='custom' scope='per-table' value='#1933-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='5' />
            <reference-line axis-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' enable-instant-analytics='true' formula='constant' id='refline9' label='Apollo 11 lands on the moon' label-type='custom' scope='per-pane' value='#1969-01-01#' value-column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]' z-order='10' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#b07aa1' />
                <format attr='mark-markers-mode' value='auto' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.09581650lcd0u018ps6x60qerf7v].[cnt:Category - Split 1:qk]</rows>
        <cols>[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]</cols>
      </table>
      <simple-id uuid='{1A823DF7-6F7B-48BA-AE10-AF7526C9DFE5}' />
    </worksheet>
    <worksheet name='Sheet 2'>
      <table>
        <view>
          <datasources>
            <datasource caption='WikiArtClean' name='federated.09581650lcd0u018ps6x60qerf7v' />
          </datasources>
          <datasource-dependencies datasource='federated.09581650lcd0u018ps6x60qerf7v'>
            <column caption='Main Category' datatype='string' name='[Category - Split 1]' role='dimension' type='nominal' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.09581650lcd0u018ps6x60qerf7v].[Category]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [Category], &quot;,&quot;, 1 ) )' />
            </column>
            <column caption='Subcategory' datatype='string' name='[Category - Split 2]' role='dimension' type='nominal' user:SplitFieldIndex='2' user:SplitFieldOrigin='[federated.09581650lcd0u018ps6x60qerf7v].[Category]'>
              <calculation class='tableau' formula='IF TRIM( SPLIT( [Category], &quot;,&quot;, 2 ) ) == &apos;&apos; &#10;THEN &apos;None&apos; ELSE TRIM( SPLIT( [Category], &quot;,&quot;, 2 )) END' />
            </column>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='date' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Category - Split 1]' derivation='None' name='[none:Category - Split 1:nk]' pivot='key' type='nominal' />
            <column-instance column='[Category - Split 2]' derivation='None' name='[none:Category - Split 2:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='Year-Trunc' name='[tyr:Year:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <manual-sort column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Category - Split 1:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Northern Renaissance&quot;</bucket>
              <bucket>&quot;Abstract Art&quot;</bucket>
              <bucket>&quot;Abstract Expressionism&quot;</bucket>
              <bucket>&quot;Art Informel&quot;</bucket>
              <bucket>&quot;Baroque&quot;</bucket>
              <bucket>&quot;Color Field Painting&quot;</bucket>
              <bucket>&quot;Cubism&quot;</bucket>
              <bucket>&quot;Early Renaissance&quot;</bucket>
              <bucket>&quot;Expressionism&quot;</bucket>
              <bucket>&quot;High Renaissance&quot;</bucket>
              <bucket>&quot;Impressionism&quot;</bucket>
              <bucket>&quot;Lyrical Abstraction&quot;</bucket>
              <bucket>&quot;Magic Realism&quot;</bucket>
              <bucket>&quot;Minimalism&quot;</bucket>
              <bucket>&quot;Neo-Expressionism&quot;</bucket>
              <bucket>&quot;Neoclassicism&quot;</bucket>
              <bucket>&quot;Pop Art&quot;</bucket>
              <bucket>&quot;Post-Impressionism&quot;</bucket>
              <bucket>&quot;Realism&quot;</bucket>
              <bucket>&quot;Rococo&quot;</bucket>
              <bucket>&quot;Romanticism&quot;</bucket>
              <bucket>&quot;Surrealism&quot;</bucket>
            </dictionary>
          </manual-sort>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.09581650lcd0u018ps6x60qerf7v].[none:Category - Split 2:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.09581650lcd0u018ps6x60qerf7v].[none:Category - Split 1:nk]</rows>
        <cols>[federated.09581650lcd0u018ps6x60qerf7v].[tyr:Year:qk]</cols>
      </table>
      <simple-id uuid='{FECB23B6-70BB-4708-91D6-F020861E8544}' />
    </worksheet>
  </worksheets>
  <windows source-height='30'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='100'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.09581650lcd0u018ps6x60qerf7v].[none:Category - Split 1:nk]</field>
            <field>[federated.09581650lcd0u018ps6x60qerf7v].[none:Category - Split 2:nk]</field>
            <field>[federated.09581650lcd0u018ps6x60qerf7v].[none:Category:nk]</field>
            <field>[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{D0CF24A5-07FF-4185-A3E8-09A04AC1615B}' />
    </window>
    <window class='worksheet' maximized='true' name='Sheet 1 (2)'>
      <cards>
        <edge name='left'>
          <strip size='100'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.09581650lcd0u018ps6x60qerf7v].[none:Category - Split 1:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.09581650lcd0u018ps6x60qerf7v].[none:Category - Split 2:nk]</field>
            <field>[federated.09581650lcd0u018ps6x60qerf7v].[none:Category:nk]</field>
            <field>[federated.09581650lcd0u018ps6x60qerf7v].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{EBED77B7-75B1-40DA-B4B5-3AD0DFF50C13}' />
    </window>
    <window class='worksheet' name='Sheet 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.09581650lcd0u018ps6x60qerf7v].[none:Category - Split 2:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.09581650lcd0u018ps6x60qerf7v].[none:Category - Split 1:nk]</field>
            <field>[federated.09581650lcd0u018ps6x60qerf7v].[none:Category - Split 2:nk]</field>
            <field>[federated.09581650lcd0u018ps6x60qerf7v].[tyr:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{BFC7AD86-11C0-4A69-A7D9-AB9B521E21DF}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Sheet 1' width='192'>
      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
      S5IDwgN0GDAAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 1 (2)' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 2' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
